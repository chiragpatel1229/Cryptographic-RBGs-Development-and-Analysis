{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3aabdc67-de65-4be4-9c02-39228bcee1ad",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from qiskit_ibm_provider import IBMProvider\n",
    "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, transpile\n",
    "\n",
    "\n",
    "provider = IBMProvider(\"966bbf0869e7e72d9db993ddcf646794695d32a38f8e9f0d76eb6553533d1c650d58cfcf1ae079eb9077a59d1accaa76e038db084ccee20555d81b384f0f6568\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2f4dafcb-0cf0-4fbf-a137-b9f064d7f786",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traceback \u001b[1;36m(most recent call last)\u001b[0m:\n",
      "\u001b[0m  Cell \u001b[0;32mIn[25], line 18\u001b[0m\n",
      "    transpiled_circuit = transpile(circuit, backend)\u001b[0m\n",
      "\u001b[0m  File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:341\u001b[0m in \u001b[0;35mtranspile\u001b[0m\n",
      "    _check_circuits_coupling_map(circuits, coupling_map, backend)\u001b[0m\n",
      "\u001b[1;36m  File \u001b[1;32m/opt/conda/lib/python3.10/site-packages/qiskit/compiler/transpiler.py:455\u001b[1;36m in \u001b[1;35m_check_circuits_coupling_map\u001b[1;36m\n",
      "\u001b[1;33m    raise CircuitTooWideForTarget(\u001b[1;36m\n",
      "\u001b[1;31mCircuitTooWideForTarget\u001b[0m\u001b[1;31m:\u001b[0m 'Number of qubits (60) in circuit-233 is greater than maximum (32) in the coupling_map'\n",
      "\n",
      "Use %tb to get the full traceback.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       ".button {\n",
       "  border: none;\n",
       "  color: white;\n",
       "  padding: 4px 8px;\n",
       "  text-align: center;\n",
       "  text-decoration: none;\n",
       "  display: inline-block;\n",
       "  font-size: 12px;\n",
       "  margin: 4px 2px;\n",
       "  transition-duration: 0.2s;\n",
       "  cursor: pointer;\n",
       "}\n",
       ".iqx-button {\n",
       "  background-color: #0f62fe; \n",
       "  color: white; \n",
       "}\n",
       ".iqx-button:hover {\n",
       "  background-color: #0043ce;\n",
       "  color: white;\n",
       "}\n",
       "</style>\n",
       "<a href=\"https://stackoverflow.com/search?q=CircuitTooWideForTarget: Number of qubits (60) in circuit-233 is greater than maximum (32) in the coupling_map\" target='_blank'><button class='button iqx-button'>Search for solution online</button></a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, transpile\n",
    "from qiskit_aer import AerSimulator\n",
    "\n",
    "n_qubits = 60\n",
    "\n",
    "# Create Quantum and Classical Registers\n",
    "q = QuantumRegister(n_qubits, 'q')\n",
    "c = ClassicalRegister(n_qubits, 'c')\n",
    "\n",
    "# Create Quantum Circuit\n",
    "circuit = QuantumCircuit(q, c)\n",
    "circuit.h(q)  # Apply Hadamard gate on all qubits\n",
    "circuit.measure(q, c)  # Measure each qubit and save the result in Classical bits\n",
    "\n",
    "# Transpile the circuit for the specified backend\n",
    "backend = provider.get_backend('ibmq_qasm_simulator') \n",
    "# backend = AerSimulator()\n",
    "transpiled_circuit = transpile(circuit, backend)\n",
    "\n",
    "binary_sequence_1 = \"\"                                    # empty string to save the binary sequence\n",
    "binary_sequence_2 = \"\"\n",
    "\n",
    "for i in range (1):\n",
    "    \n",
    "    # Execute the transpiled circuit\n",
    "    job = backend.run(transpiled_circuit, shots=10)  # Set shots to 1 for a single measurement\n",
    "    result = job.result()\n",
    "    counts = result.get_counts()\n",
    "\n",
    "    # Extract the random bit sequence\n",
    "    binary_sequence_1 += list (counts.keys ()) [0]        # select the unique binary sequence by it's index here it's [0]\n",
    "    binary_sequence_2 += list (counts.keys ()) [1]        # select the unique binary sequence by it's index here it's [0]\n",
    "\n",
    "binary_sequence_1 = binary_sequence_1[:256]               # Consider only required sequence length\n",
    "binary_sequence_2 = binary_sequence_2[:256]\n",
    "\n",
    "# print the final binary sequence\n",
    "print('seq_1 ',binary_sequence_1,'\\nseq_2', binary_sequence_2, '\\n')\n",
    "print(binary_sequence_1 == binary_sequence_2, '\\n')\n",
    "print('1', len(binary_sequence_1), '\\n2', len(binary_sequence_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c62a98c-cc63-4133-94e7-00db0b56a46a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b28b5735-dbc3-405e-a789-c120378c6f50",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Qiskit v1.0.2 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
