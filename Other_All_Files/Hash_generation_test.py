# import hashlibimport hashlibimport randomimport string# ====================================== Generate random messages ==================================================def rnd_msg(length):    # https://www.geeksforgeeks.org/python-generate-random-string-of-given-length/    chars = string.ascii_letters + string.digits + string.punctuation       # Random message Char. selection Opts.    msg = "".join(random.choice(chars) for _ in range(length)).encode()     # Generating random strings    # .encode() is for converting the 'string' message into the 'bytes'    return msg# ===================== Convert the object into binary string and write it into .txt file ===========================def write_into_file(obj, file_i):    scale = 16    num_of_bits = 256    binary_digest = bin(int(obj.hexdigest(), scale))[2:].zfill(num_of_bits)    with open(file_i, "w") as c:    # Open the i_th file for writing        c.write(binary_digest)      # Write the binary hash value to the file# ======================= Create 1000 seeds / messages and files with hashed binary values ===========================messages = []                               # Create an empty list to store all the random seeds / messagesfor i in range(1, 10):    message = rnd_msg(20)                   # Random message with 20 characters    messages.append(message)                # Save the message with every iteration    hash_object = hashlib.sha256(message)   # Create a hash object using message    # print(f"The digest for message {i} is =>", hash_object.hexdigest())    file_name = f"hash_{i}.txt"              # file name selection based on the message    write_into_file(hash_object, file_name)  # Write values into the file# ====================================== Create a list of messages ==================================================with open("List of messages.txt", "w") as f:    for index, message in enumerate(messages, start=1):  # Write the list of messages to the file with numbering        f.write(f"{index}. {message.decode()}\n")    print("The process is Successful!!")# ================================================= end =============================================================# # ------ Input variables ---------# fileName = "hash_6.txt"# create_Newfile = 1                  # 1 => Yes, 0 => No# write_File = 1                      # 1 => Yes, 0 => No# # ==================================## m = hashlib.sha256(b"Encrypt this message").hexdigest()## # -----------------------------------------------------------------------## # hash_1.txt ........ SHA-256 'Nobody inspects the spammish repetition'# # hash_2.txt ........ SHA-256 'Test for Bustiness'# # hash_3.txt ........ SHA-256 'Crypthographical Hash Function'# # hash_4.txt ........ SHA-256 'Encrypt this message'# # hash_5.txt ........ SHA-256 'Encrypt'# # hash_6.txt ........ SHA-256 'Encrypt this'## # -----------------------------------------------------------------------# print('The digest is =>', m)## # m = '031e'# # print('The hex digest is =>',m)## scale = 16  # equals to hexadecimal# num_of_bits = 256# binary_digest = bin(int(m, scale))[2:].zfill(num_of_bits)## print('The binary digest is =>', binary_digest)# print('Length of the digest is =>', len(binary_digest))## # --------- Creating a new file -----------## if create_Newfile == 1:#     f = open(fileName, "x")#     print('File created !!')## if write_File == 1:#     f = open(fileName, "w")#     f.write(binary_digest)#     f.close()#     print('Written in file. Successful !!')