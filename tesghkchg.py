import random

class Runs_tests:
    def __init__(self, data):
        self.data = data
        self.ret = []
        for i in range(len(self.data)-1):
            if self.data[i] > self.data[i+1]:
                self.ret.append(-1)
            else:
                self.ret.append(1)

    def num_directional_runs(self):
        num_runs = 0
        if len(self.ret) > 0:
            num_runs += 1
        for i in range(1, len(self.ret)):
            if self.ret[i] != self.ret[i-1]:
                num_runs += 1
        return num_runs

    def len_directional_runs(self):
        max_run = 0
        run = 1
        for i in range(1, len(self.ret)):
            if self.ret[i] == self.ret[i-1]:
                run += 1
            else:
                if run > max_run:
                    max_run = run
                run = 1
        if run > max_run:
            max_run = run
        return max_run

    def num_increases_decreases(self):
        positive = 0
        for i in range(len(self.ret)):
            if self.ret[i] == 1:
                positive += 1
        reverse_positive = len(self.ret) - positive
        if positive > reverse_positive:
            return positive
        else:
            return reverse_positive

    def calculate_all_test_statistics(self):
        num_directional_runs = self.num_directional_runs()
        len_directional_runs = self.len_directional_runs()
        num_increases_decreases = self.num_increases_decreases()

        return num_directional_runs, len_directional_runs, num_increases_decreases


def fisher_yates_shuffle(sequence):
    for i in range(len(sequence) - 1, 0, -1):
        j = random.randint(0, i)
        sequence[i], sequence[j] = sequence[j], sequence[i]
    return sequence

def permutation_test(S):
    S = list(S)
    runs_tests = Runs_tests(S)
    Ti = runs_tests.calculate_all_test_statistics()
    print(Ti)
    C = [0, 0, 0]

    for _ in range(10000):
        S = fisher_yates_shuffle(S)
        runs_tests = Runs_tests(S)
        T = runs_tests.calculate_all_test_statistics()

        for i in range(3):
            if T[i] > Ti[i]:
                C[i] += 1
            elif T[i] == Ti[i]:
                C[i] += 1
    print(C)
    for i in range(3):
        if C[i] <= 5 or C[i] >= 9995:
            return "Reject the IID assumption"
    return "Assume that the noise source outputs are IID"

# Test the function
seq
print(permutation_test(seq))


def read_sequences(file_name_):
    with open(file_name_, 'r') as file:                      # open the file in a read mode
        _sequences = []                                      # set a buffer to store the sequences
        for line in file:
            stripped_line = line.strip()                     # extract each sequence as a separate line
            mapped_line = list(map(int, stripped_line))      # convert each line to the list of integers
            _sequences.append(mapped_line)                   # append each sequence as a list to the buffer
    return _sequences                                        # return the list of sequences


def Runs_of_all_sequences(seq_):
    all_runs = []                                          # set a buffer to store the normalised gaps
    for sequence in seq_:
        statics = permutation_test(sequence)
        all_runs.append(statics)   # set them with a descending order to ease the further part
    return all_runs


sequences = read_sequences('../RBG_data_files/AES_DRBG.txt')       # collect All the sequences
# sequences
Runs = Runs_of_all_sequences(sequences)  # all normalised gaps
# print(sequences)
