from math import log2, sqrt


def most_common_value(sequence, Output_type=0):

    # Constant Z is selected from this reference point
    # https://www.statology.org/how-to-find-z-alpha-2-za-2/
    # Actually NIST recommended using 2.567 with the confidence level of 1 - 0.005 = p 41
    Z_value = 1.96  # for a 95% confidence interval

    binary_list = [int(bit) for bit in sequence]    # convert the sequence to the list of integers
    num_zeros = binary_list.count(0)                # count the number of zeros and ones
    num_ones = binary_list.count(1)
    mode = max(num_ones, num_zeros)                 # find the maximum occurred bits in the sequence

    # Calculate p-hat and p_u
    p_hat = mode / len(sequence)                   # from Page 41 in NIST 800-90B
    p_u = min(1.0, p_hat + Z_value * sqrt((p_hat * (1.0 - p_hat)) / (len(sequence) - 1)))

    # Calculate min-entropy
    min_entropy = -log2(p_u)

    # Verbose output
    if Output_type == 2:
        print(f"MCV Estimate: mode = {mode}, p-hat = {p_hat}, p_u = {p_u}, min_entropy = {min_entropy}")
    elif Output_type == 3:
        print(f"Most Common Value Estimate: Mode count = {mode}")
        print(f"Most Common Value Estimate: p-hat = {p_hat}")
        print(f"Most Common Value Estimate: p_u = {p_u}")
        print(f"Most Common Value Estimate: min entropy = {min_entropy}")

    return min_entropy


seq
s = [0, 1, 1, 2, 0, 1, 2, 2, 0, 1, 0, 1, 1, 0, 2, 2, 1, 0, 2, 1]
print(len(s))
most_common_value(s, 3)

